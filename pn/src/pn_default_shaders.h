#pragma once
const char __pn_shaded_vert[] = "#version 330 core\nlayout (location = 0) in vec3 a_pos;\nlayout (location = 1) in vec3 a_normal;\nlayout (location = 2) in vec2 a_uv;\n\nuniform mat4 u_model;\nuniform mat4 u_view;\nuniform mat4 u_projection;\n\nout vec2 v_uv;\nout vec3 v_normal;\nout vec3 v_frag_pos;\n		\nvoid main() {\n	gl_Position = u_projection * u_view * u_model * vec4(a_pos, 1.0);\n	v_uv = a_uv;\n	v_frag_pos = vec3(u_model * vec4(a_pos, 1.0));\n    v_normal = mat3(transpose(inverse(u_model))) * a_normal;\n}";
const char __pn_shaded_frag[] = "#version 330 core\n\nuniform vec3 u_color;\nuniform bool u_has_texture;\nuniform bool u_use_light;\nuniform vec3 u_light_pos;\nuniform vec3 u_light_color;\nuniform sampler2D u_texture;\nuniform vec3 u_camera_pos;\n\nout vec4 f_color;\n\nin vec2 v_uv;\nin vec3 v_normal;\nin vec3 v_frag_pos;\n\nvoid main() {\n	vec3 object_color;\n	if(u_has_texture) 	object_color = vec3(texture(u_texture, v_uv)) * u_color; \n	else 				object_color = u_color;\n\n	vec3 result;\n	if(u_use_light) {\n		// Ambient.\n		float ambient_strength = 0.1;\n		vec3 ambient = ambient_strength * u_light_color;\n		\n		// Diffuse.\n		vec3 norm = normalize(v_normal);\n		vec3 light_dir = normalize(u_light_pos - v_frag_pos);\n		float diff = max(dot(norm, light_dir), 0.0);\n		vec3 diffuse = diff * u_light_color;\n		\n		// Specular.\n		float specular_strength = 1.0;\n		vec3 view_dir = normalize(u_camera_pos - v_frag_pos);\n		vec3 reflect_dir = reflect(-light_dir, norm);\n		float spec = pow(max(dot(view_dir, reflect_dir), 0.0), 32);\n		vec3 specular = specular_strength * spec * u_light_color;\n		\n		// Attenuation.\n		float distance = length(u_light_pos - v_frag_pos);\n		float attenuation = clamp(30 / distance, 0, 1);\n		ambient *= attenuation;\n		specular *= attenuation;\n		diffuse *= attenuation;\n		result = (ambient + diffuse + specular) * object_color * attenuation;\n	} else {\n		result = object_color;\n	}\n	f_color = vec4(result, 1.0);\n};";
